{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lamarbooru Links GitHub","title":"Lamarbooru"},{"location":"#lamarbooru","text":"","title":"Lamarbooru"},{"location":"#links","text":"GitHub","title":"Links"},{"location":"api/","text":"API Routes File Routes GET /api/file/:id Get file by id. Parameters: id : The numerical ID of the file to fetch. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-05-30T15:52:35.297Z\" , \"updateDate\" : \"2022-05-30T15:52:35.298Z\" , \"filename\" : \"c3bb72a9-4cbe-4872-b7b2-bf9e27bfa3e8.jpeg\" , \"hash\" : \"85747e8865a35c3f44a1e5596b36f79d\" , \"status\" : \"inbox\" , \"trash\" : false , \"deleted\" : false , \"rating\" : \"safe\" , \"sources\" : { \"id\" : \"86739154-6dd0-4e94-b8a8-b623c313228d\" , \"site\" : \"danbooru\" , \"url\" : \"https://www.example.com/image.jpeg\" , \"status\" : \"downloaded\" } \"tags\" : [ { \"id\" : 1 , \"tag\" : \"1girl\" , \"namespace\" : \"tag\" , \"_count\" : { \"files\" : 5 } }, { \"id\" : 2 , \"tag\" : \"absurdres\" , \"namespace\" : \"meta\" , \"_count\" : { \"files\" : 4 } } ] } Unsuccessful response codes: 404: File not found. POST /api/file Add a new file to the database. Arguments: file : (required) The file to upload. tags : (required) Array of strings containing tags. rating : (optional) The rating of the file (must be safe, questionable, or explicit), defaults to explicit. sources : (optional) Sources of file in an array of strings. Example request body { \"tags\" : [ \"meta:absurdres\" , \"1girl\" , \"creator:yom\" ], \"sources\" : [ \"https://www.example.com/image.jpeg\" ], \"rating\" : \"safe\" , } Successful Reponse (201) { \"id\" : 1 , ... full f ile da ta ... } Unsuccessful response codes: 400: Missing required fields or invalid file type. 303: File already exists. Unsuccessful Response (303) { \"error\" : \"File already exists\" , f ile : { ... f ile da ta o f ma t chi n g f ile ... } } PUT /api/file/:id Update the data on the file. Parameters: id : The numerical ID of the file to update. Arguments: tags : (required) Array of strings containing tags. rating : (optional) The rating of the file (must be safe, questionable, or explicit). sources : (optional) Sources of file in an array of strings. Example request body { \"tags\" : [ \"creator:yomu\" , \"meta:absurdres\" , \"1girl\" , \"1boy\" ], \"sources\" : [ \"https://www.example.com/example.jpg\" ], \"rating\" : \"safe\" } Successful Reponse (200) { \"id\" : 1 , ... full f ile da ta wi t h cha n ges ... ] } Unsuccessful response codes: 400: Missing required fields or invalid field data. 404: No file found with that id. 500: Database error while updating file. PUT /api/file/status/:id Sets a file to the specified status. Parameters: id : (required) The ID of the file to move to the inbox. Arguments: status : (required) Status to set file to (archived or inbox). Successful Reponse (200) { ... full f ile da ta ... } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is already marked input status. 500: Database error while updating file. PUT /api/file/trash/:id Removes a file from the trash and moves it to the inbox. Parameters: id : (required) The ID of the file to move to the inbox. Successful Reponse (200) { \"success\" : \"File has been removed from the trash and moved to inbox\" } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is already deleted or in the trash. 500: Database error while updating file. DELETE /api/file/trash/:id Adds a file to the trash. Parameters: id : (required) The ID of the file to move to the trash. Successful Reponse (200) { \"success\" : \"File moved to the trash\" } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is not in the trash. 500: Database error while updating file. POST /api/file/booru Add a new file to the database using data from a booru. Arguments: url : (required) The url of the file to upload. Successful Reponse (201) { \"id\" : 1 , ... full f ile da ta ... } Unsuccessful response codes: 400: Invalid site url or invalid parameters. 500: Database error while updating file. GET /api/file/search/:page Get a page of 64 files, optionally filtered by tag Parameters: page : (required) The page number, must one or greater. tags : (optional) The tag to filter by, any number of tags are supported and should be seperated by a \"+\". status : (optional) The status of the file to filter by, defaults to inbox and archive. Any number of statuses are supported and should be seperated by \"+\". trash : (optional) Whether to filter by files in the trash or not, defaults to false. Successful Reponse (200) [ { \"id\" : 5 , ... full f ile da ta ... }, { \"id\" : 4 , ... full f ile da ta ... }, ... e t c ... ] Unsuccessful response codes: 404: No tags found with the parameters provided. Database Routes GET /api/database/stats Get stats about the database Successful Reponse (200) { \"files\" : 200 , \"fileSize\" : 678107 , \"tags\" : 1090 } Tag Routes GET /api/tag/search/:tag Get all tags that start with the :tag parameter Parameters: tag : (required) Tag to search for. Successful Reponse (200) [ { \"id\" : 4 , \"tag\" : \"1girl\" , \"namespace\" : \"tag\" }, { \"id\" : 1389 , \"tag\" : \"1boy\" , \"namespace\" : \"tag\" } ] Subscription Routes GET /api/subscription Get a list of all subscriptions. Successful Reponse (200) [ { \"id\" : 2 , \"createDate\" : \"2022-06-05T02:59:46.851Z\" , \"updateDate\" : \"2022-06-05T03:00:51.360Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"1girl\" ], \"tagBlacklist\" : [], \"limit\" : 500 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T03:00:42.543Z\" , \"_count\" : { \"runs\" : 5 , } }, { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"_count\" : { \"runs\" : 1 } } ] POST /api/subscription Create a new subscription. Parameters: site : (required) danbooru . tags : (required) Array of strings containing tags to search. interval : (required) daily , weekly , or monthly . tagBlacklist : (optional) Array of strings containing tags of images to skip. Example request body { \"site\" : \"danbooru\" , \"tags\" : [ \"mizuha_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"interval\" : \"daily\" } ``` ```jso n t i tle = \"Successful Reponse (201)\" { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:59:46.851Z\" , \"updateDate\" : \"2022-06-05T03:00:51.360Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T03:00:42.543Z\" } Unsuccessful response codes: 400: Missing required fields or invalid field data. GET /api/subscription/:id Get information about a subscription by id. Parameters: id : (required) The numerical ID of the file to update. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"runs\" : [ { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:12:04.876Z\" , \"updateDate\" : \"2022-06-05T02:20:06.843Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"status\" : \"finished\" , \"pageNumber\" : 11 , \"downloadedUrlCount\" : 200 , \"skippedUrlCount\" : 42 , \"failedUrlCount\" : 1 , \"finished\" : true , \"finishedAt\" : \"2022-06-05T02:20:06.840Z\" } ], \"_count\" : { \"runs\" : 1 } } PUT /api/subscription/:id Update a subscription. Parameters: id : (required) The numerical ID of the file to update. Arguments: status : (required) The status to upgrade the subscription to (must be waiting or paused). Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , } Unsuccessful response codes: 404: No subscription found with matching id. 500: Database error while updating subscription. GET /api/subscription/logs/:id Get full logs of a subscription run. Parameters: id : (required) The uuid of the run to get the logs of. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"log\" : [ { \"id\" : \"a552ad48-a611-4569-a43a-5bd3d76497ce\" , \"subscriptionRunId\" : 1 , \"url\" : \"https://danbooru.donmai.us/posts/000000\" , \"status\" : \"downloaded\" , \"createDate\" : \"2022-06-05T02:12:06.132Z\" , \"updateDate\" : \"2022-06-05T02:12:06.133Z\" , \"file\" : { ... associa te d f ile objec t i f a n y ... } }, .... e t c .... ] } Unsuccessful response codes: 400: Missing required fields or invalid field data. 404: No run found with matching id.","title":"API Routes"},{"location":"api/#api-routes","text":"","title":"API Routes"},{"location":"api/#file-routes","text":"","title":"File Routes"},{"location":"api/#get-apifileid","text":"Get file by id. Parameters: id : The numerical ID of the file to fetch. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-05-30T15:52:35.297Z\" , \"updateDate\" : \"2022-05-30T15:52:35.298Z\" , \"filename\" : \"c3bb72a9-4cbe-4872-b7b2-bf9e27bfa3e8.jpeg\" , \"hash\" : \"85747e8865a35c3f44a1e5596b36f79d\" , \"status\" : \"inbox\" , \"trash\" : false , \"deleted\" : false , \"rating\" : \"safe\" , \"sources\" : { \"id\" : \"86739154-6dd0-4e94-b8a8-b623c313228d\" , \"site\" : \"danbooru\" , \"url\" : \"https://www.example.com/image.jpeg\" , \"status\" : \"downloaded\" } \"tags\" : [ { \"id\" : 1 , \"tag\" : \"1girl\" , \"namespace\" : \"tag\" , \"_count\" : { \"files\" : 5 } }, { \"id\" : 2 , \"tag\" : \"absurdres\" , \"namespace\" : \"meta\" , \"_count\" : { \"files\" : 4 } } ] } Unsuccessful response codes: 404: File not found.","title":"GET /api/file/:id"},{"location":"api/#post-apifile","text":"Add a new file to the database. Arguments: file : (required) The file to upload. tags : (required) Array of strings containing tags. rating : (optional) The rating of the file (must be safe, questionable, or explicit), defaults to explicit. sources : (optional) Sources of file in an array of strings. Example request body { \"tags\" : [ \"meta:absurdres\" , \"1girl\" , \"creator:yom\" ], \"sources\" : [ \"https://www.example.com/image.jpeg\" ], \"rating\" : \"safe\" , } Successful Reponse (201) { \"id\" : 1 , ... full f ile da ta ... } Unsuccessful response codes: 400: Missing required fields or invalid file type. 303: File already exists. Unsuccessful Response (303) { \"error\" : \"File already exists\" , f ile : { ... f ile da ta o f ma t chi n g f ile ... } }","title":"POST /api/file"},{"location":"api/#put-apifileid","text":"Update the data on the file. Parameters: id : The numerical ID of the file to update. Arguments: tags : (required) Array of strings containing tags. rating : (optional) The rating of the file (must be safe, questionable, or explicit). sources : (optional) Sources of file in an array of strings. Example request body { \"tags\" : [ \"creator:yomu\" , \"meta:absurdres\" , \"1girl\" , \"1boy\" ], \"sources\" : [ \"https://www.example.com/example.jpg\" ], \"rating\" : \"safe\" } Successful Reponse (200) { \"id\" : 1 , ... full f ile da ta wi t h cha n ges ... ] } Unsuccessful response codes: 400: Missing required fields or invalid field data. 404: No file found with that id. 500: Database error while updating file.","title":"PUT /api/file/:id"},{"location":"api/#put-apifilestatusid","text":"Sets a file to the specified status. Parameters: id : (required) The ID of the file to move to the inbox. Arguments: status : (required) Status to set file to (archived or inbox). Successful Reponse (200) { ... full f ile da ta ... } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is already marked input status. 500: Database error while updating file.","title":"PUT /api/file/status/:id"},{"location":"api/#put-apifiletrashid","text":"Removes a file from the trash and moves it to the inbox. Parameters: id : (required) The ID of the file to move to the inbox. Successful Reponse (200) { \"success\" : \"File has been removed from the trash and moved to inbox\" } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is already deleted or in the trash. 500: Database error while updating file.","title":"PUT /api/file/trash/:id"},{"location":"api/#delete-apifiletrashid","text":"Adds a file to the trash. Parameters: id : (required) The ID of the file to move to the trash. Successful Reponse (200) { \"success\" : \"File moved to the trash\" } Unsuccessful response codes: 404: No file with matching id found. 405: File found, but it is not in the trash. 500: Database error while updating file.","title":"DELETE /api/file/trash/:id"},{"location":"api/#post-apifilebooru","text":"Add a new file to the database using data from a booru. Arguments: url : (required) The url of the file to upload. Successful Reponse (201) { \"id\" : 1 , ... full f ile da ta ... } Unsuccessful response codes: 400: Invalid site url or invalid parameters. 500: Database error while updating file.","title":"POST /api/file/booru"},{"location":"api/#get-apifilesearchpage","text":"Get a page of 64 files, optionally filtered by tag Parameters: page : (required) The page number, must one or greater. tags : (optional) The tag to filter by, any number of tags are supported and should be seperated by a \"+\". status : (optional) The status of the file to filter by, defaults to inbox and archive. Any number of statuses are supported and should be seperated by \"+\". trash : (optional) Whether to filter by files in the trash or not, defaults to false. Successful Reponse (200) [ { \"id\" : 5 , ... full f ile da ta ... }, { \"id\" : 4 , ... full f ile da ta ... }, ... e t c ... ] Unsuccessful response codes: 404: No tags found with the parameters provided.","title":"GET /api/file/search/:page"},{"location":"api/#database-routes","text":"","title":"Database Routes"},{"location":"api/#get-apidatabasestats","text":"Get stats about the database Successful Reponse (200) { \"files\" : 200 , \"fileSize\" : 678107 , \"tags\" : 1090 }","title":"GET /api/database/stats"},{"location":"api/#tag-routes","text":"","title":"Tag Routes"},{"location":"api/#get-apitagsearchtag","text":"Get all tags that start with the :tag parameter Parameters: tag : (required) Tag to search for. Successful Reponse (200) [ { \"id\" : 4 , \"tag\" : \"1girl\" , \"namespace\" : \"tag\" }, { \"id\" : 1389 , \"tag\" : \"1boy\" , \"namespace\" : \"tag\" } ]","title":"GET /api/tag/search/:tag"},{"location":"api/#subscription-routes","text":"","title":"Subscription Routes"},{"location":"api/#get-apisubscription","text":"Get a list of all subscriptions. Successful Reponse (200) [ { \"id\" : 2 , \"createDate\" : \"2022-06-05T02:59:46.851Z\" , \"updateDate\" : \"2022-06-05T03:00:51.360Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"1girl\" ], \"tagBlacklist\" : [], \"limit\" : 500 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T03:00:42.543Z\" , \"_count\" : { \"runs\" : 5 , } }, { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"_count\" : { \"runs\" : 1 } } ]","title":"GET /api/subscription"},{"location":"api/#post-apisubscription","text":"Create a new subscription. Parameters: site : (required) danbooru . tags : (required) Array of strings containing tags to search. interval : (required) daily , weekly , or monthly . tagBlacklist : (optional) Array of strings containing tags of images to skip. Example request body { \"site\" : \"danbooru\" , \"tags\" : [ \"mizuha_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"interval\" : \"daily\" } ``` ```jso n t i tle = \"Successful Reponse (201)\" { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:59:46.851Z\" , \"updateDate\" : \"2022-06-05T03:00:51.360Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T03:00:42.543Z\" } Unsuccessful response codes: 400: Missing required fields or invalid field data.","title":"POST /api/subscription"},{"location":"api/#get-apisubscriptionid","text":"Get information about a subscription by id. Parameters: id : (required) The numerical ID of the file to update. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"runs\" : [ { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:12:04.876Z\" , \"updateDate\" : \"2022-06-05T02:20:06.843Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"status\" : \"finished\" , \"pageNumber\" : 11 , \"downloadedUrlCount\" : 200 , \"skippedUrlCount\" : 42 , \"failedUrlCount\" : 1 , \"finished\" : true , \"finishedAt\" : \"2022-06-05T02:20:06.840Z\" } ], \"_count\" : { \"runs\" : 1 } }","title":"GET /api/subscription/:id"},{"location":"api/#put-apisubscriptionid","text":"Update a subscription. Parameters: id : (required) The numerical ID of the file to update. Arguments: status : (required) The status to upgrade the subscription to (must be waiting or paused). Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , } Unsuccessful response codes: 404: No subscription found with matching id. 500: Database error while updating subscription.","title":"PUT /api/subscription/:id"},{"location":"api/#get-apisubscriptionlogsid","text":"Get full logs of a subscription run. Parameters: id : (required) The uuid of the run to get the logs of. Successful Reponse (200) { \"id\" : 1 , \"createDate\" : \"2022-06-05T02:08:40.361Z\" , \"updateDate\" : \"2022-06-05T02:20:06.852Z\" , \"site\" : \"danbooru\" , \"tags\" : [ \"mizuhara_chizuru\" ], \"tagBlacklist\" : [ \"comic\" ], \"limit\" : 200 , \"status\" : \"finished\" , \"interval\" : \"daily\" , \"nextRun\" : \"2022-06-06T02:17:44.655Z\" , \"log\" : [ { \"id\" : \"a552ad48-a611-4569-a43a-5bd3d76497ce\" , \"subscriptionRunId\" : 1 , \"url\" : \"https://danbooru.donmai.us/posts/000000\" , \"status\" : \"downloaded\" , \"createDate\" : \"2022-06-05T02:12:06.132Z\" , \"updateDate\" : \"2022-06-05T02:12:06.133Z\" , \"file\" : { ... associa te d f ile objec t i f a n y ... } }, .... e t c .... ] } Unsuccessful response codes: 400: Missing required fields or invalid field data. 404: No run found with matching id.","title":"GET /api/subscription/logs/:id"},{"location":"getting_started/","text":"Setting up Lamarbooru Building from source Required Environment Variables PORT : Port to run the webserver. DATABASE_URL : Postgres connection string. VITE_BASE_URL : Base URL for webserver, should be https://localhost:3000/ for development. / can be used as well. FILES_DIRECTORY : Location on disk to store uploaded files. THUMBNAILS_DIRECTORY : Location on disk to store generated thumbnails. POSTGRES_DATA_DIRECTORY : Location on disk to store Postgres data. DELETE_MISPLACED_FILES : Should be true or false . If true , any files in the two above directories that are not in the database and are named with a valid UUID will be deleted during weekly maintenance. Example .env file PORT=3000 DATABASE_URL=\"postgresql://postgres:very_secure_password_that_you_should_probably_change@localhost:5432/postgres?schema=postgres\" VITE_BASE_URL=http://localhost:3000/ FILES_DIRECTORY=\"/Lamarbooru/files\" THUMBNAILS_DIRECTORY=\"/Lamarbooru/thumbnails\" POSTGRES_DATA_DIRECTORY=\"/Lamarbooru/postgres_data\" DELETE_MISPLACED_FILES=true Setup Process Clone the repo. Navigate to the directory that the repo was closed to. Run npm i to install dependencies. Install Postgres (this can be done with the docker-compose up command if Docker is installed on your machine). Create a file named .env with the contents listed above under Required Environment Variables .* Run prisma db push to create the required tables. Run npm run start to start Lamarbooru. Navigate to the url that is printed into the console using a web browser of your choice to access the webserver. Note: If you opt to use the docker-compose up command for setting up Postgres, you can copy the example .env file. Docker Install Docker . If you're on Windows or Mac, you can use the Docker Desktop . Download zip of the repository. Extract the zip to a location on your computer. Create a file named .env in the root of the folder that was extracted. In the file, add the following lines: FILES_DIRECTORY=\"C:/path/to/store/files\" THUMBNAILS_DIRECTORY=\"C:/path/to/store/thumbnails\" POSTGRES_DATA_DIRECTORY=\"C:/path/to/store/postgres_data\" DELETE_MISPLACED_FILES=true Run the following command: docker-compose up Once everything is running, you can visit http://localhost:6969 in your browser to access the client.","title":"Setting up Lamarbooru"},{"location":"getting_started/#setting-up-lamarbooru","text":"","title":"Setting up Lamarbooru"},{"location":"getting_started/#building-from-source","text":"","title":"Building from source"},{"location":"getting_started/#required-environment-variables","text":"PORT : Port to run the webserver. DATABASE_URL : Postgres connection string. VITE_BASE_URL : Base URL for webserver, should be https://localhost:3000/ for development. / can be used as well. FILES_DIRECTORY : Location on disk to store uploaded files. THUMBNAILS_DIRECTORY : Location on disk to store generated thumbnails. POSTGRES_DATA_DIRECTORY : Location on disk to store Postgres data. DELETE_MISPLACED_FILES : Should be true or false . If true , any files in the two above directories that are not in the database and are named with a valid UUID will be deleted during weekly maintenance.","title":"Required Environment Variables"},{"location":"getting_started/#example-env-file","text":"PORT=3000 DATABASE_URL=\"postgresql://postgres:very_secure_password_that_you_should_probably_change@localhost:5432/postgres?schema=postgres\" VITE_BASE_URL=http://localhost:3000/ FILES_DIRECTORY=\"/Lamarbooru/files\" THUMBNAILS_DIRECTORY=\"/Lamarbooru/thumbnails\" POSTGRES_DATA_DIRECTORY=\"/Lamarbooru/postgres_data\" DELETE_MISPLACED_FILES=true","title":"Example .env file"},{"location":"getting_started/#setup-process","text":"Clone the repo. Navigate to the directory that the repo was closed to. Run npm i to install dependencies. Install Postgres (this can be done with the docker-compose up command if Docker is installed on your machine). Create a file named .env with the contents listed above under Required Environment Variables .* Run prisma db push to create the required tables. Run npm run start to start Lamarbooru. Navigate to the url that is printed into the console using a web browser of your choice to access the webserver. Note: If you opt to use the docker-compose up command for setting up Postgres, you can copy the example .env file.","title":"Setup Process"},{"location":"getting_started/#docker","text":"Install Docker . If you're on Windows or Mac, you can use the Docker Desktop . Download zip of the repository. Extract the zip to a location on your computer. Create a file named .env in the root of the folder that was extracted. In the file, add the following lines: FILES_DIRECTORY=\"C:/path/to/store/files\" THUMBNAILS_DIRECTORY=\"C:/path/to/store/thumbnails\" POSTGRES_DATA_DIRECTORY=\"C:/path/to/store/postgres_data\" DELETE_MISPLACED_FILES=true Run the following command: docker-compose up Once everything is running, you can visit http://localhost:6969 in your browser to access the client.","title":"Docker"}]}